X_array_copy[,heldout_idx$x[1], heldout_idx$y[1]] <- NA
}
prop_out <- sum(is.na(X_array_copy)) / prod(dim(X_array_copy)) * 100 # check
stopifnot(prop_out >= desired_heldout*100, prop_out <= desired_heldout*100 + 1)
l_fit_microTensor[[k]] <-
microTensor::microTensor(
X = X_array_copy, R = 3,
nn_t = TRUE, ortho_m = TRUE,
weighted = TRUE,
control = list(L_init = 2,
gamma = 2,
maxit = 1000,
verbose = TRUE,
debug_dir = paste0(dir_output, "/fit/", i)))
l_fit_ctf[[k]] <-
microTensor::ctf(
X = X_array_copy, R = 3)
l_fit_pca[[k]] <- microTensor::pca(X_array_copy, R = 3)
baselineMT <- as.data.frame(l_fit_microTensor[[k]]$s)
baselinePCA <- as.data.frame(l_fit_pca[[k]]$s)
baselineCTF <- as.data.frame(l_fit_ctf[[k]]$s)
looMT <- rep(NA, length(EEN))
looPCA <- rep(NA, length(EEN))
looCTF <- rep(NA, length(EEN))
looOurs <- rep(NA, length(EEN))
Ours <- read.table(paste0("results/thresholding/thresholding/A", j, "_C", c, "_D", d, "_K3_", seed, ".csv"), sep = ",")
looOurs <- rep(0, length(EEN))
for(i in 1:length(EEN)){
fitMT <- glm(EEN[-i] ~ V1 + V2 + V3, family = binomial, data = as.data.frame(baselineMT[-i,]))
fitPCA <- glm(EEN[-i] ~ V1 + V2 + V3, family = binomial, data = as.data.frame(baselinePCA[-i,]))
fitCTF <- glm(EEN[-i] ~ V1 + V2 + V3, family = binomial, data = as.data.frame(baselineCTF[-i,]))
fitOurs <- glm(EEN[-i] ~ V1 + V2 + V3, family = binomial, data = as.data.frame(Ours[-i,]))
looMT[i] <- predict.glm(fitMT, newdata = baselineMT[i,], type = "response")
looPCA[i] <- predict.glm(fitPCA, newdata = baselinePCA[i,], type = "response")
looCTF[i] <- predict.glm(fitCTF, newdata = baselineCTF[i,], type = "response")
looOurs[i] <- predict.glm(fitOurs, newdata = Ours[i,], type = "response")
}
prMT <- pr.curve(1 - looMT, weights.class0 = 1 - EEN)
prPCA <- pr.curve(1 - looPCA, weights.class0 = 1 - EEN)
prCTF <- pr.curve(1 - looCTF, weights.class0 = 1 - EEN)
prOur <- pr.curve(1 - looOurs, weights.class0 = 1 - EEN)
prMTs[k,j] <- prMT$auc.integral
prPCAs[k,j] <- prPCA$auc.integral
prCTFs[k,j] <- prCTF$auc.integral
prOurs[k,j] <- prOur$auc.integral
}
}
#save(l_fit_microTensor, file = paste0(dir_output,"/", desired_heldout,"fit_microTensor.RData"))
#save(l_fit_ctf, file = paste0(dir_output, "/", desired_heldout, "fit_ctf.RData"))
#save(fit_pca, file = paste0(dir_output,"/", desired_heldout,"fit_pca.RData"))
prOurs
prCTF
prCTFs
prMTs
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
prOurs
prMT <- apply(prMTs, 2, median)
prPCA <- apply(prPCAs, 2, median)
prCTF <- apply(prCTFs, 2, median)
prOurs <- apply(prOurs, 2, median)
plot(seq(0.2, 0.5, by=0.1), prOurs, type="l", col="blue", ylim=c(0.5, 1), xlab="Prop. heldout", ylab="AUC", main="AUC vs. Noise Level")
prOurs
source("~/.active-rstudio-document")
prOurs
prMT
source("~/.active-rstudio-document")
prCTF
prCTFs
source("~/.active-rstudio-document")
prOurs
prCTF
source("~/.active-rstudio-document")
library(infotheo)
install.packages("infotheo")
library(infotheo)
A[,1]
Ours[,1]
Ours[1,]
for (r in 1:3){
Ours[,r] <- Ours[,r]/sum(Ours[,r])
}
Ours[,r]
for (s in 1:30){
Ours[s,] <- Ours[s,]/sum(Ours[s,])
}
Ours[1,]
image(tIOurs)
image(t(Ours))
EEN
groups
true <- matrix(0, 30, 3)
f_groups <- factor(groups)
for (i in 1:length(groups)){
label <- f_groups[i]
true[i,label] <- 1
}
sum(true)
mutinformation(true[1,], Ours[1,])
labels <- rep(0, 30)
for (i in 1:length(groups)){
labels[i] <- which.max(Ours[i,])
}
mutinformation(labels, true)
mutinformation(labels, f_groups)
mutinformation(labels, true[,c(2,1,3)])
mutinformation(labels, true[,c(3,2,3)])
mutinformation(labels, true[,c(,3)])
true
mutinformation(labels, f_groups)
?mutinformation
CTF <- l_fit_ctf[[1]]$s
for (r in 1:3){
Ours[,r] <- Ours[,r]/sum(Ours[,r])
CTF[,r] <- CTF[,r]/sum(CTF[,r])
}
for (s in 1:30){
Ours[s,] <- Ours[s,]/sum(Ours[s,])
CTF[s,] <- CTF[s,]/sum(CTF[s,])
}
labels_CTF <- rep(0, 30)
f_groups <- factor(groups)
for (i in 1:length(groups)){
labels[i] <- which.max(Ours[i,])
labels_CTF[i] <- which.max(CTF[i,])
}
mutinformation(labels_CTF)
mutinformation(labels_CTF, f_groups)
MT <- l_fit_microTensor[[1]]$s
for (r in 1:3){
Ours[,r] <- Ours[,r]/sum(Ours[,r])
CTF[,r] <- CTF[,r]/sum(CTF[,r])
MT[,r] <- MT[,r]/sum(MT[,r])
}
for (s in 1:30){
Ours[s,] <- Ours[s,]/sum(Ours[s,])
CTF[s,] <- CTF[s,]/sum(CTF[s,])
MT[s,] <- MT[s,]/sum(MT[s,])
}
labels_MT <- rep(0, 30)
f_groups <- factor(groups)
for (i in 1:length(groups)){
labels[i] <- which.max(Ours[i,])
labels_CTF[i] <- which.max(CTF[i,])
labels_MT[i] <- which.max(MT[i,])
}
mutinformation(labels_MT, f_groups)
PCA <- l_fit_pca[[1]]$s
for (r in 1:3){
Ours[,r] <- Ours[,r]/sum(Ours[,r])
CTF[,r] <- CTF[,r]/sum(CTF[,r])
MT[,r] <- MT[,r]/sum(MT[,r])
PCA[,r] <- PCA[,r]/sum(PCA[,r])
}
for (s in 1:30){
Ours[s,] <- Ours[s,]/sum(Ours[s,])
CTF[s,] <- CTF[s,]/sum(CTF[s,])
MT[s,] <- MT[s,]/sum(MT[s,])
PCA[s,] <- PCA[s,]/sum(PCA[s,])
}
labels_PCA <- rep(0, 30)
f_groups <- factor(groups)
for (i in 1:length(groups)){
labels[i] <- which.max(Ours[i,])
labels_CTF[i] <- which.max(CTF[i,])
labels_MT[i] <- which.max(MT[i,])
labels_PCA[i] <- which.max(PCA[i,])
}
mutinformation(labels_PCA, f_groups)
prMT
source("~/.active-rstudio-document")
prOurs
source("~/.active-rstudio-document")
prOurs
source("~/.active-rstudio-document")
prOursF
prOurs
labels
f_groups
plot(seq(0.2, 0.5, by=0.1), prOursF, type="l", col="blue", ylim=c(0, 1), xlab="Prop. heldout", ylab="AUC", main="AUC vs. Noise Level")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
prOursF <- apply(prOurs, 1, median)
prOurs
prOursF
source("~/.active-rstudio-document")
prOursF
setwd("/Users/johnhood/Research/Schein/HCPCCL")
hps <- seq(0.2, 0.5, by=0.1)
n_reps <- 10
n_heldout <- length(hps)
prMTs <- matrix(0, n_reps, n_heldout)
prPCAs <- matrix(0, n_reps, n_heldout)
prCTFs <- matrix(0, n_reps, n_heldout)
prOurs <- matrix(0, n_reps, n_heldout)
x_range <- 1:30
y_range <- 1:15
# Create a grid of Cartesian indices
grid <- expand.grid(x = x_range, y = y_range)
for (j in 1:n_heldout){
print(j)
#heldout_prop <- heldout_proportions[j]
desired_heldout <- hps[j]
l_fit_microTensor <- list()
l_fit_ctf <- list()
l_fit_pca <- list()
for(k in seq(1, n_reps)) {
set.seed(k+379)
X_array_copy <- X_array
while (mean(is.na(X_array_copy)) < desired_heldout){
heldout_idx <- grid[sample(nrow(grid)), ]
X_array_copy[,heldout_idx$x[1], heldout_idx$y[1]] <- NA
}
prop_out <- sum(is.na(X_array_copy)) / prod(dim(X_array_copy)) * 100 # check
stopifnot(prop_out >= desired_heldout*100, prop_out <= desired_heldout*100 + 1)
l_fit_microTensor[[k]] <-
microTensor::microTensor(
X = X_array_copy, R = 3,
nn_t = TRUE, ortho_m = TRUE,
weighted = TRUE,
control = list(L_init = 2,
gamma = 2,
maxit = 1000,
verbose = TRUE,
debug_dir = paste0(dir_output, "/fit/", i)))
l_fit_ctf[[k]] <-
microTensor::ctf(
X = X_array_copy, R = 3)
l_fit_pca[[k]] <- microTensor::pca(X_array_copy, R = 3)
baselineMT <- as.data.frame(l_fit_microTensor[[k]]$s)
baselinePCA <- as.data.frame(l_fit_pca[[k]]$s)
baselineCTF <- as.data.frame(l_fit_ctf[[k]]$s)
looMT <- rep(NA, length(EEN))
looPCA <- rep(NA, length(EEN))
looCTF <- rep(NA, length(EEN))
looOurs <- rep(NA, length(EEN))
Ours <- read.table(paste0("results/thresholding/thresholding/A", j, "_C", c, "_D", d, "_K3_", seed, ".csv"), sep = ",")
looOurs <- rep(0, length(EEN))
for(i in 1:length(EEN)){
fitMT <- glm(EEN[-i] ~ V1 + V2 + V3, family = binomial, data = as.data.frame(baselineMT[-i,]))
fitPCA <- glm(EEN[-i] ~ V1 + V2 + V3, family = binomial, data = as.data.frame(baselinePCA[-i,]))
fitCTF <- glm(EEN[-i] ~ V1 + V2 + V3, family = binomial, data = as.data.frame(baselineCTF[-i,]))
fitOurs <- glm(EEN[-i] ~ V1 + V2 + V3, family = binomial, data = as.data.frame(Ours[-i,]))
looMT[i] <- predict.glm(fitMT, newdata = baselineMT[i,], type = "response")
looPCA[i] <- predict.glm(fitPCA, newdata = baselinePCA[i,], type = "response")
looCTF[i] <- predict.glm(fitCTF, newdata = baselineCTF[i,], type = "response")
looOurs[i] <- predict.glm(fitOurs, newdata = Ours[i,], type = "response")
}
prMT <- pr.curve(1 - looMT, weights.class0 = 1 - EEN)
prPCA <- pr.curve(1 - looPCA, weights.class0 = 1 - EEN)
prCTF <- pr.curve(1 - looCTF, weights.class0 = 1 - EEN)
prOur <- pr.curve(1 - looOurs, weights.class0 = 1 - EEN)
prMTs[k,j] <- prMT$auc.integral
prPCAs[k,j] <- prPCA$auc.integral
prCTFs[k,j] <- prCTF$auc.integral
prOurs[k,j] <- prOur$auc.integral
}
save(l_fit_microTensor, file = paste0(dir_output,"/", desired_heldout,"fit_microTensor.RData"))
save(l_fit_ctf, file = paste0(dir_output, "/", desired_heldout, "fit_ctf.RData"))
save(fit_pca, file = paste0(dir_output,"/", desired_heldout,"fit_pca.RData"))
}
save(l_fit_pca, file = paste0(dir_output,"/", desired_heldout,"fit_pca.RData"))
setwd("/Users/johnhood/Research/Schein/HCPCCL")
hps <- seq(0.2, 0.5, by=0.1)
n_reps <- 10
n_heldout <- length(hps)
prMTs <- matrix(0, n_reps, n_heldout)
prPCAs <- matrix(0, n_reps, n_heldout)
prCTFs <- matrix(0, n_reps, n_heldout)
prOurs <- matrix(0, n_reps, n_heldout)
x_range <- 1:30
y_range <- 1:15
# Create a grid of Cartesian indices
grid <- expand.grid(x = x_range, y = y_range)
for (j in 2:n_heldout){
print(j)
#heldout_prop <- heldout_proportions[j]
desired_heldout <- hps[j]
l_fit_microTensor <- list()
l_fit_ctf <- list()
l_fit_pca <- list()
for(k in seq(1, n_reps)) {
set.seed(k+379)
X_array_copy <- X_array
while (mean(is.na(X_array_copy)) < desired_heldout){
heldout_idx <- grid[sample(nrow(grid)), ]
X_array_copy[,heldout_idx$x[1], heldout_idx$y[1]] <- NA
}
prop_out <- sum(is.na(X_array_copy)) / prod(dim(X_array_copy)) * 100 # check
stopifnot(prop_out >= desired_heldout*100, prop_out <= desired_heldout*100 + 1)
l_fit_microTensor[[k]] <-
microTensor::microTensor(
X = X_array_copy, R = 3,
nn_t = TRUE, ortho_m = TRUE,
weighted = TRUE,
control = list(L_init = 2,
gamma = 2,
maxit = 1000,
verbose = TRUE,
debug_dir = paste0(dir_output, "/fit/", i)))
l_fit_ctf[[k]] <-
microTensor::ctf(
X = X_array_copy, R = 3)
l_fit_pca[[k]] <- microTensor::pca(X_array_copy, R = 3)
baselineMT <- as.data.frame(l_fit_microTensor[[k]]$s)
baselinePCA <- as.data.frame(l_fit_pca[[k]]$s)
baselineCTF <- as.data.frame(l_fit_ctf[[k]]$s)
looMT <- rep(NA, length(EEN))
looPCA <- rep(NA, length(EEN))
looCTF <- rep(NA, length(EEN))
looOurs <- rep(NA, length(EEN))
Ours <- read.table(paste0("results/thresholding/thresholding/A", j, "_C", c, "_D", d, "_K3_", seed, ".csv"), sep = ",")
looOurs <- rep(0, length(EEN))
for(i in 1:length(EEN)){
fitMT <- glm(EEN[-i] ~ V1 + V2 + V3, family = binomial, data = as.data.frame(baselineMT[-i,]))
fitPCA <- glm(EEN[-i] ~ V1 + V2 + V3, family = binomial, data = as.data.frame(baselinePCA[-i,]))
fitCTF <- glm(EEN[-i] ~ V1 + V2 + V3, family = binomial, data = as.data.frame(baselineCTF[-i,]))
fitOurs <- glm(EEN[-i] ~ V1 + V2 + V3, family = binomial, data = as.data.frame(Ours[-i,]))
looMT[i] <- predict.glm(fitMT, newdata = baselineMT[i,], type = "response")
looPCA[i] <- predict.glm(fitPCA, newdata = baselinePCA[i,], type = "response")
looCTF[i] <- predict.glm(fitCTF, newdata = baselineCTF[i,], type = "response")
looOurs[i] <- predict.glm(fitOurs, newdata = Ours[i,], type = "response")
}
prMT <- pr.curve(1 - looMT, weights.class0 = 1 - EEN)
prPCA <- pr.curve(1 - looPCA, weights.class0 = 1 - EEN)
prCTF <- pr.curve(1 - looCTF, weights.class0 = 1 - EEN)
prOur <- pr.curve(1 - looOurs, weights.class0 = 1 - EEN)
prMTs[k,j] <- prMT$auc.integral
prPCAs[k,j] <- prPCA$auc.integral
prCTFs[k,j] <- prCTF$auc.integral
prOurs[k,j] <- prOur$auc.integral
}
save(l_fit_microTensor, file = paste0(dir_output,"/", desired_heldout,"fit_microTensor.RData"))
save(l_fit_ctf, file = paste0(dir_output, "/", desired_heldout, "fit_ctf.RData"))
save(l_fit_pca, file = paste0(dir_output,"/", desired_heldout,"fit_pca.RData"))
}
l_CTF <- load("results/FARMM/0.5/fit_CTF.RData")
l_CTF <- load("results/FARMM/0.5fit_CTF.RData")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
l_CTF
l_MT
l_fit_CTF
l_fit_ctf
save(l_fit_ctf, file="data.RData")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
prCTF
prMT
prPCA
prMT <- apply(prMT, 1, median)
prPCA <- apply(prPCA, 1, median)
prCTF <- apply(prCTF, 1, median)
prOursF <- apply(prOurs, 1, median)
prMT
prPCA
prCTF
prOursDF
prOursF
source("~/.active-rstudio-document")
plot(seq(0.2, 0.5, by=0.1), prOursF, type="l", col="blue", ylim=c(0, 1), xlab="Prop. heldout", ylab="AUC", main="AUC vs. Noise Level")
lines(seq(0.2, 0.5, by=0.1), prMT, type="l", col="red")
lines(seq(0.2, 0.5, by=0.1), prPCA, type="l", col="green")
lines(seq(0.2, 0.5, by=0.1), prCTF, type="l", col="purple")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
plot(seq(0.2, 0.5, by=0.1), prOursF, col="blue", ylim=c(0, 1), xlab="Proportion Data Missing", ylab="Mutual Information", main="", pch=19)
points(seq(0.2, 0.5, by=0.1), prMTs, pch=19, col="red")
points(seq(0.2, 0.5, by=0.1), prPCAs, pch=19, col="green")
points(seq(0.2, 0.5, by=0.1), prCTFs, pch=19, col="purple")
#plot standard errors as error bars
segments(seq(0.2, 0.5, by=0.1), prOursF - prOursse, seq(0.2, 0.5, by=0.1), prOursF + prOursse, col="blue")
segments(seq(0.2, 0.5, by=0.1), prMTs - prMTse, seq(0.2, 0.5, by=0.1), prMTs + prMTse, col="red")
segments(seq(0.2, 0.5, by=0.1), prPCAs - prPCAse, seq(0.2, 0.5, by=0.1), prPCAs + prPCAse, col="green")
segments(seq(0.2, 0.5, by=0.1), prCTFs - prCTFse, seq(0.2, 0.5, by=0.1), prCTFs + prCTFse, col="purple")
#standard errors
prMTse <- apply(prMT, 1, sd)/sqrt(10)
prPCAse <- apply(prPCA, 1, sd)/sqrt(10)
prCTFse <- apply(prCTF, 1, sd)/sqrt(10)
prOursse <- apply(prOurs, 1, sd)/sqrt(10)
plot(seq(0.2, 0.5, by=0.1), prOursF, col="blue", ylim=c(0, 1), xlab="Proportion Data Missing", ylab="Mutual Information", main="", pch=19)
points(seq(0.2, 0.5, by=0.1), prMTs, pch=19, col="red")
points(seq(0.2, 0.5, by=0.1), prPCAs, pch=19, col="green")
points(seq(0.2, 0.5, by=0.1), prCTFs, pch=19, col="purple")
#plot standard errors as error bars
segments(seq(0.2, 0.5, by=0.1), prOursF - prOursse, seq(0.2, 0.5, by=0.1), prOursF + prOursse, col="blue")
segments(seq(0.2, 0.5, by=0.1), prMTs - prMTse, seq(0.2, 0.5, by=0.1), prMTs + prMTse, col="red")
segments(seq(0.2, 0.5, by=0.1), prPCAs - prPCAse, seq(0.2, 0.5, by=0.1), prPCAs + prPCAse, col="green")
segments(seq(0.2, 0.5, by=0.1), prCTFs - prCTFse, seq(0.2, 0.5, by=0.1), prCTFs + prCTFse, col="purple")
legend("topright", legend=c("Ours", "microTensor", "PCA", "CTF"), col=c("blue", "red", "green", "purple"), lty=1:1, cex=0.8)
#plot standard errors as error bars
arrows(seq(0.2, 0.5, by=0.1), prOursF - prOursse, seq(0.2, 0.5, by=0.1), prOursF + prOursse, col="blue")
#plot standard errors as error bars
arrows(seq(0.2, 0.5, by=0.1), prOursF - prOursse, seq(0.2, 0.5, by=0.1), prOursF + prOursse, col="blue", angle=90, code=3)
plot(seq(0.2, 0.5, by=0.1), prOursF, col="blue", ylim=c(0, 1), xlab="Proportion Data Missing", ylab="Mutual Information", main="", pch=16)
points(seq(0.2, 0.5, by=0.1), prMTs, pch=16, col="red")
points(seq(0.2, 0.5, by=0.1), prPCAs, pch=16, col="green")
points(seq(0.2, 0.5, by=0.1), prCTFs, pch=16, col="purple")
#plot standard errors as error bars
arrows(seq(0.2, 0.5, by=0.1), prOursF - prOursse, seq(0.2, 0.5, by=0.1), prOursF + prOursse, col="blue", angle=90, code=3)
arrows(seq(0.2, 0.5, by=0.1), prMTs - prMTse, seq(0.2, 0.5, by=0.1), prMTs + prMTse, col="red", angle=90, code=3)
arrows(seq(0.2, 0.5, by=0.1), prPCAs - prPCAse, seq(0.2, 0.5, by=0.1), prPCAs + prPCAse, col="green", angle=90, code=3)
arrows(seq(0.2, 0.5, by=0.1), prCTFs - prCTFse, seq(0.2, 0.5, by=0.1), prCTFs + prCTFse, col="purple", angle=90, code=3)
legend("topright", legend=c("Ours", "microTensor", "PCA", "CTF"), col=c("blue", "red", "green", "purple"), lty=1:1, cex=0.8)
source("~/.active-rstudio-document")
legend("topright", legend=c("Ours", "microTensor", "PCA", "CTF"), col=c("black", "gray", "lightgreen", "lightblue"), lty=1:1, cex=0.8)
plot(seq(0.2, 0.5, by=0.1), prOursF, col="black", ylim=c(0, 1), xlab="Proportion Data Missing", ylab="Mutual Information", main="", pch=16)
points(seq(0.2, 0.5, by=0.1), prMTs, pch=16, col="gray")
points(seq(0.2, 0.5, by=0.1), prPCAs, pch=16, col="lightgreen")
points(seq(0.2, 0.5, by=0.1), prCTFs, pch=16, col="lightblue")
#plot standard errors as error bars
arrows(seq(0.2, 0.5, by=0.1), prOursF - prOursse, seq(0.2, 0.5, by=0.1), prOursF + prOursse, col="black", angle=90, code=3)
arrows(seq(0.2, 0.5, by=0.1), prMTs - prMTse, seq(0.2, 0.5, by=0.1), prMTs + prMTse, col="gray", angle=90, code=3)
arrows(seq(0.2, 0.5, by=0.1), prPCAs - prPCAse, seq(0.2, 0.5, by=0.1), prPCAs + prPCAse, col="lightgreen", angle=90, code=3)
arrows(seq(0.2, 0.5, by=0.1), prCTFs - prCTFse, seq(0.2, 0.5, by=0.1), prCTFs + prCTFse, col="lightblue", angle=90, code=3)
legend("topright", legend=c("Ours", "microTensor", "PCA", "CTF"), col=c("black", "gray", "lightgreen", "lightblue"), lty=1:1, cex=0.8)
l_fit_PCA[1,]
l_fit_pca[[1]]$s[1,]
l_fit_ctf[[1]]$s[1,]
l_fit_ctf[[1]]
image(l_fit_ctf[[1]]$s)
plot(l_fit_ctf[[1]]$s[,1], l_fit_ctf[[1]]$s[,2])
l_fit_microTensor[[1]]$s
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
prMTs
prOursF
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
Our_kmeans
f_groups
Ours
source("~/.active-rstudio-document")
Ours
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
prMTs
source("~/.active-rstudio-document")
?specc
PCA
dim(PCA)
dim(MT)
dim(CTF)
dim(Ours)
source("~/.active-rstudio-document")
nrow(Ours)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
PCA_spec
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
warnings()
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/Research/Schein/HCPCCL/specc.R")
source("~/Research/Schein/HCPCCL/results/figures.R")
sum(core==0)
sum(G0==0)
mean(G0==0)
mean(A0)
mean(A)
mean(A==0)
mean(T0)
mean(T0==0)
